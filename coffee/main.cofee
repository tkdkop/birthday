class Game
    constructor: (Phaser) ->
        _.bindAll @, 'loadplayer', 'createplayer', 'preload', 'create', 'update'
        @game = new Phaser.Game(800, 600, Phaser.AUTO, 'game-container', {preload: @preload, create: @create, update: @update}, 
                                null, false, false)
    
    loadplayer: (str) ->
        @game.load.spritesheet(str, "assets/#{str}-v1.1-sheet.png", 15, 32)

    preload: ->
        @loadplayer('keish')
        @loadplayer('red')
        @loadplayer('blue')
        @loadplayer('green')
        
        # experimenting
        @game.load.tilemap('mario', 'assets/super_mario.json', null, Phaser.Tilemap.TILED_JSON)
        @game.load.image('tiles', 'assets/super_mario.png')

    createplayer: (name, scale, x, y) ->
        player = @game.add.sprite(x, y, name)
        player.anchor.setTo(0.5, 0.5)
        player.scale.setTo(scale, scale)
        player.animations.add('walk', [1, 2], 5, true)
        player.animations.add('talk', [0, 3], 2, true)
        playerLeft = false
        @game.physics.p2.enable player
        @game.physics.arcade.gravity.y = 250
        player.body.collideWorldBounds = true
        return player 

    create: ->
        # start physics
        @game.physics.startSystem Phaser.Physics.P2JS

        # sky
#        data = [ '3333', '3333', '3333']
#        @game.create.texture('solid', data, 200, 200)
#        @game.add.sprite(0, 0, 'solid')

        # experimenting
        @game.stage.backgroundColor = '#787878'
        @map = @game.add.tilemap 'mario'
        @map.addTilesetImage 'SuperMarioBros-World1-1', 'tiles'
        @layer = @map.createLayer 'World1'
        @layer.resizeWorld()
        
        # player
        @player = @createplayer 'keish', 2, 80, 20
        @createplayer 'red', 1, 70, 20
        @createplayer 'blue', 1, 60, 20
        @createplayer 'green', 1, 50, 20
#        @player = @game.add.sprite(20, 80, 'keish')
#        @player.anchor.setTo(0.5, 0.5)
#        @player.scale.setTo(2,2)
#        @player.animations.add('walk', [1, 2], 5, true)
#        @player.animations.add('talk', [0, 3], 2, true)
#        @playerLeft = false
        @game.physics.p2.enable @player
        @game.physics.arcade.gravity.y = 250
        @player.body.collideWorldBounds = true
        @game.camera.follow @player
         
        # input
        @cursors = @game.input.keyboard.createCursorKeys()
        console.log "Game created"

    update: ->
        # reset everything
        @player.body.setZeroVelocity()

        if @cursors.right.isDown or @cursors.left.isDown
            if @cursors.left.isDown 
                @player.body.moveLeft 80
                if !@playerLeft
                    @player.scale.x *= -1
                @playerLeft = true
            else 
                if @playerLeft
                    @player.scale.x *= -1
                @playerLeft = false
                @player.body.moveRight 80
            @player.animations.play 'walk'
        else if @cursors.down.isDown
            @player.animations.play 'talk'
        else
            @player.animations.stop null, true
            @player.frame = 0

window.main =  =>
    new Game(Phaser)
